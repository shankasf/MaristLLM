nohup: ignoring input
INFO:datasets:PyTorch version 2.5.1 available.
INFO:sentence_transformers.SentenceTransformer:Use pytorch device_name: cuda
INFO:sentence_transformers.SentenceTransformer:Load pretrained SentenceTransformer: sentence-transformers/all-MiniLM-L6-v2
DEBUG: Model found in /mnt/StorageOne/knowledgeGraph/transformers_cache/models--ibm-granite--granite-3.0-8b-instruct. Loading from cache...
Loading checkpoint shards:   0%|          | 0/4 [00:00<?, ?it/s]Loading checkpoint shards:  25%|██▌       | 1/4 [00:01<00:03,  1.19s/it]Loading checkpoint shards:  50%|█████     | 2/4 [00:02<00:02,  1.16s/it]Loading checkpoint shards:  75%|███████▌  | 3/4 [00:03<00:00,  1.04it/s]Loading checkpoint shards: 100%|██████████| 4/4 [00:03<00:00,  1.43it/s]Loading checkpoint shards: 100%|██████████| 4/4 [00:03<00:00,  1.19it/s]
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE CONSTRAINT unique_chunk IF NOT EXISTS FOR (e:Chunk) REQUIRE (e.chunkId) IS UNIQUE` has no effect.} {description: `CONSTRAINT unique_chunk FOR (e:Chunk) REQUIRE (e.chunkId) IS UNIQUE` already exists.} {position: None} for query: 'CREATE CONSTRAINT unique_chunk IF NOT EXISTS FOR (c:Chunk) REQUIRE c.chunkId IS UNIQUE'
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE VECTOR INDEX data_chunks_index IF NOT EXISTS FOR (e:Chunk) ON (e.textEmbedding) OPTIONS {indexConfig: {`vector.dimensions`: 384, `vector.similarity_function`: "cosine"}}` has no effect.} {description: `VECTOR INDEX data_chunks_index FOR (e:Chunk) ON (e.textEmbedding)` already exists.} {position: None} for query: "\n        CREATE VECTOR INDEX data_chunks_index IF NOT EXISTS FOR (c:Chunk)\n        ON (c.textEmbedding)\n        OPTIONS {\n            indexConfig: {\n                `vector.dimensions`: 384,\n                `vector.similarity_function`: 'cosine'\n            }\n        }\n        "
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 2, column: 17, offset: 17} for query: '\n                MATCH (s:Entity {id: $from}), (o:Entity {id: $to})\n                CALL apoc.create.relationship(s, $type, {}, o)\n                YIELD rel\n                RETURN rel\n                '
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 2, column: 17, offset: 17} for query: '\n                MATCH (s:Entity {id: $from}), (o:Entity {id: $to})\n                CALL apoc.create.relationship(s, $type, {}, o)\n                YIELD rel\n                RETURN rel\n                '
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 2, column: 17, offset: 17} for query: '\n                MATCH (s:Entity {id: $from}), (o:Entity {id: $to})\n                CALL apoc.create.relationship(s, $type, {}, o)\n                YIELD rel\n                RETURN rel\n                '
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 2, column: 17, offset: 17} for query: '\n                MATCH (s:Entity {id: $from}), (o:Entity {id: $to})\n                CALL apoc.create.relationship(s, $type, {}, o)\n                YIELD rel\n                RETURN rel\n                '
DEBUG: Initialized KnowledgeGraphRAG with device: cuda
DEBUG: Processing folder: /mnt/StorageOne/knowledgeGraph/MaristLLM/data
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_58_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_42_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_62_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_21_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_32_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_46_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_60_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_28_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_53_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_29_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_101_processed.pdf
DEBUG: File already processed: electionlab.mit.edu_research_projects_survey-performance-american-elections_3_processed.pdf
DEBUG: File already processed: GenNext-Fall-2024-Summary_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_33_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_27_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_23_processed.pdf
DEBUG: File already processed: www.lwv.org__1_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_15_processed.pdf
DEBUG: File already processed: data.gov_1_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_66_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_38_processed.pdf
DEBUG: File already processed: electionlab.mit.edu_research_projects_survey-performance-american-elections_1_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_54_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_57_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_63_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_44_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_31_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_13_processed.pdf
DEBUG: Processing file: poll.txt
DEBUG: Creating unstructured knowledge graph
DEBUG: Split text into 4 chunks
DEBUG: Unstructured knowledge graph created
DEBUG: Creating structured knowledge graph
DEBUG: Split text into 4 chunks
DEBUG: Extracting entities and relations
DEBUG: Parsed 8 entities and 1 relations
DEBUG: Extracted entities: [{'id': 'entity_name', 'type': 'entity_type'}, {'id': 'Kamala Harris', 'type': 'Vice President'}, {'id': 'Donald Trump', 'type': 'Former President'}, {'id': 'NPR', 'type': 'Organization'}, {'id': 'PBS News', 'type': 'Organization'}, {'id': 'Marist Poll', 'type': 'Poll'}, {'id': 'U.S. PRESIDENTIAL CONTEST', 'type': 'Election'}, {'id': 'November 2024', 'type': 'Date'}]
DEBUG: Extracted relations: [{'from': 'subject', 'type': 'predicate', 'to': 'object'}]
DEBUG: Extracting entities and relations
DEBUG: Parsed 14 entities and 1 relations
DEBUG: Extracted entities: [{'id': 'entity_name', 'type': 'entity_type'}, {'id': 'Joe Biden', 'type': 'Person'}, {'id': 'Kamala Harris', 'type': 'Person'}, {'id': 'Donald Trump', 'type': 'Person'}, {'id': 'Dr. Lee M. Miringoff', 'type': 'Person'}, {'id': 'Marist Institute for Public Opinion', 'type': 'Organization'}, {'id': 'Likely Voters', 'type': 'Group'}, {'id': 'Preserving Democracy', 'type': 'Concept'}, {'id': 'Inflation', 'type': 'Concept'}, {'id': 'Immigration', 'type': 'Concept'}, {'id': 'Abortion', 'type': 'Concept'}, {'id': 'Health Care', 'type': 'Concept'}, {'id': 'War in the Middle East', 'type': 'Concept'}, {'id': 'Crime', 'type': 'Concept'}]
DEBUG: Extracted relations: [{'from': 'subject', 'type': 'predicate', 'to': 'object'}]
DEBUG: Extracting entities and relations
DEBUG: Parsed 4 entities and 1 relations
DEBUG: Extracted entities: [{'id': 'entity_name', 'type': 'entity_type'}, {'id': 'Donald Trump', 'type': 'person'}, {'id': 'Kamala Harris', 'type': 'person'}, {'id': 'Likely Voters', 'type': 'group'}]
DEBUG: Extracted relations: [{'from': 'subject', 'type': 'predicate', 'to': 'object'}]
DEBUG: Extracting entities and relations
DEBUG: Parsed 50 entities and 1 relations
DEBUG: Extracted entities: [{'id': 'entity_name', 'type': 'entity_type'}, {'id': '72% of likely voters', 'type': 'percentage'}, {'id': 'More Than Seven in Ten', 'type': 'percentage'}, {'id': 'Democrats', 'type': 'political party'}, {'id': 'Republicans', 'type': 'political party'}, {'id': 'independents', 'type': 'political party'}, {'id': '50% of likely voters', 'type': 'percentage'}, {'id': '48% of likely voters', 'type': 'percentage'}, {'id': '54% of likely voters', 'type': 'percentage'}, {'id': 'President Joe Biden', 'type': 'person'}, {'id': '43% of likely voters', 'type': 'percentage'}, {'id': '55% of likely voters', 'type': 'percentage'}, {'id': '44% of Americans', 'type': 'percentage'}, {'id': '19% of Americans', 'type': 'percentage'}, {'id': '40% of Americans', 'type': 'percentage'}, {'id': '55% of Americans', 'type': 'percentage'}, {'id': '44% of Americans', 'type': 'percentage'}, {'id': '19% of Americans', 'type': 'percentage'}, {'id': '5% of likely voters', 'type': 'percentage'}, {'id': '46% of likely voters', 'type': 'percentage'}, {'id': '21% of likely voters', 'type': 'percentage'}, {'id': '48% of registered voters', 'type': 'percentage'}, {'id': '48% of registered voters', 'type': 'percentage'}, {'id': '1,560', 'type': 'number'}, {'id': '1,446', 'type': 'number'}, {'id': '1,297', 'type': 'number'}, {'id': 'October 31st through November 2nd, 2024', 'type': 'date'}, {'id': 'Marist Poll', 'type': 'organization'}, {'id': 'NPR', 'type': 'organization'}, {'id': 'PBS News', 'type': 'organization'}, {'id': 'U.S. adults', 'type': 'group'}, {'id': '18 years of age and older', 'type': 'age group'}, {'id': 'U.S.', 'type': 'location'}, {'id': 'phone', 'type': 'method'}, {'id': 'live interviewers', 'type': 'method'}, {'id': 'text', 'type': 'method'}, {'id': 'online', 'type': 'method'}, {'id': 'multi-mode design', 'type': 'method'}, {'id': 'phone using live interviewers', 'type': 'method'}, {'id': 'results for all adults', 'type': 'result'}, {'id': 'results for registered voters', 'type': 'result'}, {'id': 'results for likely voters', 'type': 'result'}, {'id': 'likely voters', 'type': 'group'}, {'id': 'registered voters', 'type': 'group'}, {'id': 'de nitely voting', 'type': 'action'}, {'id': 'this year’s election', 'type': 'event'}, {'id': '3.2 percentage points', 'type': 'margin of error'}, {'id': '3.3 percentage points', 'type': 'margin of error'}, {'id': '3.5 percentage points', 'type': 'margin of error'}, {'id': '2024', 'type': 'year'}]
DEBUG: Extracted relations: [{'from': 'subject', 'type': 'predicate', 'to': 'object'}]
DEBUG: Structured knowledge graph created
DEBUG: Processed and renamed: /mnt/StorageOne/knowledgeGraph/MaristLLM/data/poll_processed.txt
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_22_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_40_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_30_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_25_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_48_processed.pdf
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE CONSTRAINT unique_chunk IF NOT EXISTS FOR (e:Chunk) REQUIRE (e.chunkId) IS UNIQUE` has no effect.} {description: `CONSTRAINT unique_chunk FOR (e:Chunk) REQUIRE (e.chunkId) IS UNIQUE` already exists.} {position: None} for query: 'CREATE CONSTRAINT unique_chunk IF NOT EXISTS FOR (c:Chunk) REQUIRE c.chunkId IS UNIQUE'
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE VECTOR INDEX data_chunks_index IF NOT EXISTS FOR (e:Chunk) ON (e.textEmbedding) OPTIONS {indexConfig: {`vector.dimensions`: 384, `vector.similarity_function`: "cosine"}}` has no effect.} {description: `VECTOR INDEX data_chunks_index FOR (e:Chunk) ON (e.textEmbedding)` already exists.} {position: None} for query: "\n        CREATE VECTOR INDEX data_chunks_index IF NOT EXISTS FOR (c:Chunk)\n        ON (c.textEmbedding)\n        OPTIONS {\n            indexConfig: {\n                `vector.dimensions`: 384,\n                `vector.similarity_function`: 'cosine'\n            }\n        }\n        "
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 2, column: 17, offset: 17} for query: '\n                MATCH (s:Entity {id: $from}), (o:Entity {id: $to})\n                CALL apoc.create.relationship(s, $type, {}, o)\n                YIELD rel\n                RETURN rel\n                '
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 2, column: 17, offset: 17} for query: '\n                MATCH (s:Entity {id: $from}), (o:Entity {id: $to})\n                CALL apoc.create.relationship(s, $type, {}, o)\n                YIELD rel\n                RETURN rel\n                '
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 2, column: 17, offset: 17} for query: '\n                MATCH (s:Entity {id: $from}), (o:Entity {id: $to})\n                CALL apoc.create.relationship(s, $type, {}, o)\n                YIELD rel\n                RETURN rel\n                '
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 2, column: 17, offset: 17} for query: '\n                MATCH (s:Entity {id: $from}), (o:Entity {id: $to})\n                CALL apoc.create.relationship(s, $type, {}, o)\n                YIELD rel\n                RETURN rel\n                '
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 2, column: 17, offset: 17} for query: '\n                MATCH (s:Entity {id: $from}), (o:Entity {id: $to})\n                CALL apoc.create.relationship(s, $type, {}, o)\n                YIELD rel\n                RETURN rel\n                '
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 2, column: 17, offset: 17} for query: '\n                MATCH (s:Entity {id: $from}), (o:Entity {id: $to})\n                CALL apoc.create.relationship(s, $type, {}, o)\n                YIELD rel\n                RETURN rel\n                '
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 2, column: 17, offset: 17} for query: '\n                MATCH (s:Entity {id: $from}), (o:Entity {id: $to})\n                CALL apoc.create.relationship(s, $type, {}, o)\n                YIELD rel\n                RETURN rel\n                '
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 2, column: 17, offset: 17} for query: '\n                MATCH (s:Entity {id: $from}), (o:Entity {id: $to})\n                CALL apoc.create.relationship(s, $type, {}, o)\n                YIELD rel\n                RETURN rel\n                '
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 2, column: 17, offset: 17} for query: '\n                MATCH (s:Entity {id: $from}), (o:Entity {id: $to})\n                CALL apoc.create.relationship(s, $type, {}, o)\n                YIELD rel\n                RETURN rel\n                '
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 2, column: 17, offset: 17} for query: '\n                MATCH (s:Entity {id: $from}), (o:Entity {id: $to})\n                CALL apoc.create.relationship(s, $type, {}, o)\n                YIELD rel\n                RETURN rel\n                '
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 2, column: 17, offset: 17} for query: '\n                MATCH (s:Entity {id: $from}), (o:Entity {id: $to})\n                CALL apoc.create.relationship(s, $type, {}, o)\n                YIELD rel\n                RETURN rel\n                '
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 2, column: 17, offset: 17} for query: '\n                MATCH (s:Entity {id: $from}), (o:Entity {id: $to})\n                CALL apoc.create.relationship(s, $type, {}, o)\n                YIELD rel\n                RETURN rel\n                '
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 2, column: 17, offset: 17} for query: '\n                MATCH (s:Entity {id: $from}), (o:Entity {id: $to})\n                CALL apoc.create.relationship(s, $type, {}, o)\n                YIELD rel\n                RETURN rel\n                '
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 2, column: 17, offset: 17} for query: '\n                MATCH (s:Entity {id: $from}), (o:Entity {id: $to})\n                CALL apoc.create.relationship(s, $type, {}, o)\n                YIELD rel\n                RETURN rel\n                '
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 2, column: 17, offset: 17} for query: '\n                MATCH (s:Entity {id: $from}), (o:Entity {id: $to})\n                CALL apoc.create.relationship(s, $type, {}, o)\n                YIELD rel\n                RETURN rel\n                '
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 2, column: 17, offset: 17} for query: '\n                MATCH (s:Entity {id: $from}), (o:Entity {id: $to})\n                CALL apoc.create.relationship(s, $type, {}, o)\n                YIELD rel\n                RETURN rel\n                '
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 2, column: 17, offset: 17} for query: '\n                MATCH (s:Entity {id: $from}), (o:Entity {id: $to})\n                CALL apoc.create.relationship(s, $type, {}, o)\n                YIELD rel\n                RETURN rel\n                '
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 2, column: 17, offset: 17} for query: '\n                MATCH (s:Entity {id: $from}), (o:Entity {id: $to})\n                CALL apoc.create.relationship(s, $type, {}, o)\n                YIELD rel\n                RETURN rel\n                '
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 2, column: 17, offset: 17} for query: '\n                MATCH (s:Entity {id: $from}), (o:Entity {id: $to})\n                CALL apoc.create.relationship(s, $type, {}, o)\n                YIELD rel\n                RETURN rel\n                '
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 2, column: 17, offset: 17} for query: '\n                MATCH (s:Entity {id: $from}), (o:Entity {id: $to})\n                CALL apoc.create.relationship(s, $type, {}, o)\n                YIELD rel\n                RETURN rel\n                '
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 2, column: 17, offset: 17} for query: '\n                MATCH (s:Entity {id: $from}), (o:Entity {id: $to})\n                CALL apoc.create.relationship(s, $type, {}, o)\n                YIELD rel\n                RETURN rel\n                '
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 2, column: 17, offset: 17} for query: '\n                MATCH (s:Entity {id: $from}), (o:Entity {id: $to})\n                CALL apoc.create.relationship(s, $type, {}, o)\n                YIELD rel\n                RETURN rel\n                '
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 2, column: 17, offset: 17} for query: '\n                MATCH (s:Entity {id: $from}), (o:Entity {id: $to})\n                CALL apoc.create.relationship(s, $type, {}, o)\n                YIELD rel\n                RETURN rel\n                '
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 2, column: 17, offset: 17} for query: '\n                MATCH (s:Entity {id: $from}), (o:Entity {id: $to})\n                CALL apoc.create.relationship(s, $type, {}, o)\n                YIELD rel\n                RETURN rel\n                '
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_26_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_50_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_2_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_35_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_45_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_65_processed.pdf
DEBUG: Processing file: poll2.txt
DEBUG: Creating unstructured knowledge graph
DEBUG: Split text into 7 chunks
DEBUG: Unstructured knowledge graph created
DEBUG: Creating structured knowledge graph
DEBUG: Split text into 7 chunks
DEBUG: Extracting entities and relations
DEBUG: Parsed 7 entities and 1 relations
DEBUG: Extracted entities: [{'id': 'entity_name', 'type': 'entity_type'}, {'id': 'GenNext', 'type': 'Project'}, {'id': 'Marist Poll', 'type': 'Organization'}, {'id': 'Matt Pater, Luke Sassa, Caroline Smith, Neel Viswanathan', 'type': 'People'}, {'id': 'Gen Z Likely Voters', 'type': 'Group'}, {'id': 'America', 'type': 'Country'}, {'id': 'Baby Boomers and likely voters in the Silent/Greatest Generation', 'type': 'Group'}]
DEBUG: Extracted relations: [{'from': 'subject', 'type': 'predicate', 'to': 'object'}]
DEBUG: Extracting entities and relations
DEBUG: Parsed 1 entities and 1 relations
DEBUG: Extracted entities: [{'id': 'entity_name', 'type': 'entity_type'}]
DEBUG: Extracted relations: [{'from': 'subject', 'type': 'predicate', 'to': 'object'}]
DEBUG: Extracting entities and relations
DEBUG: Parsed 10 entities and 1 relations
DEBUG: Extracted entities: [{'id': 'entity_name', 'type': 'entity_type'}, {'id': 'Baby Boomers/Silent/Greatest Generation', 'type': 'Generation'}, {'id': 'Millennials', 'type': 'Generation'}, {'id': 'Gen Z', 'type': 'Generation'}, {'id': 'Preserving democracy', 'type': 'Issue'}, {'id': 'Economy', 'type': 'Issue'}, {'id': 'Abortion', 'type': 'Issue'}, {'id': 'Immigration', 'type': 'Issue'}, {'id': 'Gun policy', 'type': 'Issue'}, {'id': 'War between Israel and Hamas', 'type': 'Issue'}]
DEBUG: Extracted relations: [{'from': 'subject', 'type': 'predicate', 'to': 'object'}]
DEBUG: Extracting entities and relations
DEBUG: Parsed 7 entities and 8 relations
DEBUG: Extracted entities: [{'id': 'entity_name', 'type': 'entity_type'}, {'id': 'Gen X', 'type': 'Generation'}, {'id': 'Baby Boomers and those in the Silent/Greatest Generation', 'type': 'Generation'}, {'id': 'Gen Z', 'type': 'Generation'}, {'id': 'Millennials', 'type': 'Generation'}, {'id': 'a candidate’s position on LGBTQ+ rights', 'type': 'Position'}, {'id': 'a game changer in their vote for President', 'type': 'Impact'}]
DEBUG: Extracted relations: [{'from': 'subject', 'type': 'predicate', 'to': 'object'}, {'from': 'Gen X', 'type': 'has this view', 'to': '21%'}, {'from': 'Baby Boomers and those in the Silent/Greatest Generation', 'type': 'has this view', 'to': '21%'}, {'from': 'Gen Z', 'type': 'more likely voters', 'to': '36%'}, {'from': 'Millennials', 'type': 'more likely voters', 'to': '32%'}, {'from': 'Gen X', 'type': 'more likely voters', 'to': '27%'}, {'from': 'Baby Boomers and those in the Silent/Greatest Generation', 'type': 'more likely voters', 'to': '21%'}, {'from': 'a candidate’s position on LGBTQ+ rights', 'type': 'is a game changer', 'to': 'a game changer in their vote for President'}]
DEBUG: Extracting entities and relations
DEBUG: Parsed 18 entities and 13 relations
DEBUG: Extracted entities: [{'id': 'entity_name', 'type': 'entity_type'}, {'id': 'Climate change', 'type': 'issue'}, {'id': 'America’s youngest likely voters', 'type': 'group'}, {'id': 'Gen Z', 'type': 'generation'}, {'id': 'Millennials', 'type': 'generation'}, {'id': 'Gen X', 'type': 'generation'}, {'id': 'Baby Boomers/ the Silent/Greatest Generation', 'type': 'generation'}, {'id': 'The American Dream', 'type': 'concept'}, {'id': 'Financial security', 'type': 'concept'}, {'id': 'Inflation', 'type': 'concept'}, {'id': 'Home ownership', 'type': 'concept'}, {'id': 'Mid-thirties', 'type': 'time'}, {'id': 'Prosperity', 'type': 'concept'}, {'id': 'Today’s youth', 'type': 'group'}, {'id': 'Parents', 'type': 'group'}, {'id': 'Marist Poll’s GenNext Student Researchers', 'type': 'group'}, {'id': 'Matt Pater', 'type': 'individual'}, {'id': 'Luke Sassa', 'type': 'individual'}]
DEBUG: Extracted relations: [{'from': 'subject', 'type': 'predicate', 'to': 'object'}, {'from': 'Climate change', 'type': 'is a more pressing issue', 'to': 'America’s youngest likely voters'}, {'from': 'America’s youngest likely voters', 'type': 'are more concerned about', 'to': 'financial security'}, {'from': 'America’s youngest likely voters', 'type': 'are more concerned about', 'to': 'inflation'}, {'from': 'America’s youngest likely voters', 'type': 'are less likely to see', 'to': 'the American Dream as attainable'}, {'from': 'America’s youngest likely voters', 'type': 'believe it is not very likely or not likely at all', 'to': 'they will own a home by the time they are 35 years old'}, {'from': 'America’s youngest likely voters', 'type': 'believe it is not very likely or not likely at all', 'to': 'today’s youth will surpass the prosperity of their parents'}, {'from': 'Gen Z', 'type': 'is less likely to see', 'to': 'the American Dream as attainable'}, {'from': 'Gen Z', 'type': 'believe it is not very likely or not likely at all', 'to': 'they will own a home by the time they are 35 years old'}, {'from': 'Gen Z', 'type': 'believe it is not very likely or not likely at all', 'to': 'today’s youth will surpass the prosperity of their parents'}, {'from': 'Millennials', 'type': 'is less likely to see', 'to': 'the American Dream as attainable'}, {'from': 'Millennials', 'type': 'believe it is not very likely or not likely at all', 'to': 'they will own a home by the time they are 35 years old'}, {'from': 'Millennials', 'type': 'believe it is not very likely or not likely at all', 'to': 'today’s youth will surpass the prosper'}]
DEBUG: Extracting entities and relations
DEBUG: Parsed 14 entities and 17 relations
DEBUG: Extracted entities: [{'id': 'entity_name', 'type': 'entity_type'}, {'id': 'Matt', 'type': 'Person'}, {'id': 'Marist Poll', 'type': 'Organization'}, {'id': 'Luke Sassa', 'type': 'Person'}, {'id': 'Marist College', 'type': 'Organization'}, {'id': 'Center Field', 'type': 'Organization'}, {'id': 'Caroline Smith', 'type': 'Person'}, {'id': 'Marist Poll', 'type': 'Organization'}, {'id': 'Clinical Mental Health Counseling', 'type': 'Field of Study'}, {'id': 'Neel Viswanathan', 'type': 'Person'}, {'id': 'Marist College', 'type': 'Organization'}, {'id': 'American Studies', 'type': 'Field of Study'}, {'id': 'Journalism', 'type': 'Field of Study'}, {'id': 'Media Associate', 'type': 'Job Title'}]
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 2, column: 17, offset: 17} for query: '\n                MATCH (s:Entity {id: $from}), (o:Entity {id: $to})\n                CALL apoc.create.relationship(s, $type, {}, o)\n                YIELD rel\n                RETURN rel\n                '
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 2, column: 17, offset: 17} for query: '\n                MATCH (s:Entity {id: $from}), (o:Entity {id: $to})\n                CALL apoc.create.relationship(s, $type, {}, o)\n                YIELD rel\n                RETURN rel\n                '
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 2, column: 17, offset: 17} for query: '\n                MATCH (s:Entity {id: $from}), (o:Entity {id: $to})\n                CALL apoc.create.relationship(s, $type, {}, o)\n                YIELD rel\n                RETURN rel\n                '
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 2, column: 17, offset: 17} for query: '\n                MATCH (s:Entity {id: $from}), (o:Entity {id: $to})\n                CALL apoc.create.relationship(s, $type, {}, o)\n                YIELD rel\n                RETURN rel\n                '
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 2, column: 17, offset: 17} for query: '\n                MATCH (s:Entity {id: $from}), (o:Entity {id: $to})\n                CALL apoc.create.relationship(s, $type, {}, o)\n                YIELD rel\n                RETURN rel\n                '
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 2, column: 17, offset: 17} for query: '\n                MATCH (s:Entity {id: $from}), (o:Entity {id: $to})\n                CALL apoc.create.relationship(s, $type, {}, o)\n                YIELD rel\n                RETURN rel\n                '
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 2, column: 17, offset: 17} for query: '\n                MATCH (s:Entity {id: $from}), (o:Entity {id: $to})\n                CALL apoc.create.relationship(s, $type, {}, o)\n                YIELD rel\n                RETURN rel\n                '
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 2, column: 17, offset: 17} for query: '\n                MATCH (s:Entity {id: $from}), (o:Entity {id: $to})\n                CALL apoc.create.relationship(s, $type, {}, o)\n                YIELD rel\n                RETURN rel\n                '
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 2, column: 17, offset: 17} for query: '\n                MATCH (s:Entity {id: $from}), (o:Entity {id: $to})\n                CALL apoc.create.relationship(s, $type, {}, o)\n                YIELD rel\n                RETURN rel\n                '
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 2, column: 17, offset: 17} for query: '\n                MATCH (s:Entity {id: $from}), (o:Entity {id: $to})\n                CALL apoc.create.relationship(s, $type, {}, o)\n                YIELD rel\n                RETURN rel\n                '
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 2, column: 17, offset: 17} for query: '\n                MATCH (s:Entity {id: $from}), (o:Entity {id: $to})\n                CALL apoc.create.relationship(s, $type, {}, o)\n                YIELD rel\n                RETURN rel\n                '
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 2, column: 17, offset: 17} for query: '\n                MATCH (s:Entity {id: $from}), (o:Entity {id: $to})\n                CALL apoc.create.relationship(s, $type, {}, o)\n                YIELD rel\n                RETURN rel\n                '
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 2, column: 17, offset: 17} for query: '\n                MATCH (s:Entity {id: $from}), (o:Entity {id: $to})\n                CALL apoc.create.relationship(s, $type, {}, o)\n                YIELD rel\n                RETURN rel\n                '
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 2, column: 17, offset: 17} for query: '\n                MATCH (s:Entity {id: $from}), (o:Entity {id: $to})\n                CALL apoc.create.relationship(s, $type, {}, o)\n                YIELD rel\n                RETURN rel\n                '
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 2, column: 17, offset: 17} for query: '\n                MATCH (s:Entity {id: $from}), (o:Entity {id: $to})\n                CALL apoc.create.relationship(s, $type, {}, o)\n                YIELD rel\n                RETURN rel\n                '
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 2, column: 17, offset: 17} for query: '\n                MATCH (s:Entity {id: $from}), (o:Entity {id: $to})\n                CALL apoc.create.relationship(s, $type, {}, o)\n                YIELD rel\n                RETURN rel\n                '
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 2, column: 17, offset: 17} for query: '\n                MATCH (s:Entity {id: $from}), (o:Entity {id: $to})\n                CALL apoc.create.relationship(s, $type, {}, o)\n                YIELD rel\n                RETURN rel\n                '
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 2, column: 17, offset: 17} for query: '\n                MATCH (s:Entity {id: $from}), (o:Entity {id: $to})\n                CALL apoc.create.relationship(s, $type, {}, o)\n                YIELD rel\n                RETURN rel\n                '
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_id_index IF NOT EXISTS FOR (e:Entity) ON (e.id)` has no effect.} {description: `RANGE INDEX entity_id_index FOR (e:Entity) ON (e.id)` already exists.} {position: None} for query: '\n        CREATE INDEX entity_id_index IF NOT EXISTS FOR (e:Entity) ON (e.id)\n        '
DEBUG: Extracted relations: [{'from': 'subject', 'type': 'predicate', 'to': 'object'}, {'from': 'Matt', 'type': 'is a', 'to': 'research associate and head coach at the Marist Poll'}, {'from': 'Luke Sassa', 'type': 'is a', 'to': 'Marist College senior majoring in Communications'}, {'from': 'Luke Sassa', 'type': 'has concentrations in', 'to': 'Sports Communication and Journalism'}, {'from': 'Luke Sassa', 'type': 'is enrolled in', 'to': 'the College’s honors program'}, {'from': 'Luke Sassa', 'type': 'serves as', 'to': 'the Editor-in-Chief of Center Field'}, {'from': 'Luke Sassa', 'type': 'is a', 'to': 'Head Coach and Quality Assurance Associate at the Marist Poll'}, {'from': 'Caroline Smith', 'type': 'is a', 'to': 'Marist College senior majoring in Psychology'}, {'from': 'Caroline Smith', 'type': 'has minors in', 'to': 'Cognitive Science and Professional Writing'}, {'from': 'Caroline Smith', 'type': 'plans to pursue', 'to': 'a graduate degree in Clinical Mental Health Counseling'}, {'from': 'Caroline Smith', 'type': 'is currently interning with', 'to': 'the Marist Poll'}, {'from': 'Caroline Smith', 'type': 'is working on', 'to': 'GenNext'}, {'from': 'Caroline Smith', 'type': 'is learning about', 'to': 'questionnaire development, data collection, and data analysis'}, {'from': 'Neel Viswanathan', 'type': 'is a', 'to': 'senior at Marist College'}, {'from': 'Neel Viswanathan', 'type': 'is majoring in', 'to': 'American Studies and Journalism'}, {'from': 'Neel Viswanathan', 'type': 'would like to work in', 'to': 'journalism after graduation'}, {'from': 'Neel Viswanathan', 'type': 'is a', 'to': 'Media Associate at the Marist Poll'}]
DEBUG: Extracting entities and relations
DEBUG: Parsed 7 entities and 1 relations
DEBUG: Extracted entities: [{'id': 'entity_name', 'type': 'entity_type'}, {'id': 'GenNext', 'type': 'Research Project'}, {'id': 'Marist Institute for Public Opinion', 'type': 'Organization'}, {'id': 'Marist Poll', 'type': 'Organization'}, {'id': 'Student Researchers', 'type': 'Group'}, {'id': 'Professionals', 'type': 'Group'}, {'id': 'Public Opinion', 'type': 'Concept'}]
DEBUG: Extracted relations: [{'from': 'subject', 'type': 'predicate', 'to': 'object'}]
DEBUG: Structured knowledge graph created
DEBUG: Processed and renamed: /mnt/StorageOne/knowledgeGraph/MaristLLM/data/poll2_processed.txt
DEBUG: File already processed: electionlab.mit.edu_research_projects_survey-performance-american-elections_2_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_56_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_47_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_49_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_39_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_55_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_14_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_41_processed.pdf
DEBUG: File already processed: Ropper1_processed.txt
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_24_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_18_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_17_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_64_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_67_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_52_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_19_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_43_processed.pdf
DEBUG: File already processed: www.theguardian.com_us_1_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_59_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_16_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_37_processed.pdf
DEBUG: File already processed: www.statista.com__1_processed.pdf
DEBUG: File already processed: ropercenter.cornell.edu_data-access_1_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_34_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_68_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_36_processed.pdf
DEBUG: File already processed: www.electionscience.org__1_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_51_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_20_processed.pdf
DEBUG: File already processed: www.eac.gov_research-and-data_studies-and-reports_61_processed.pdf
DEBUG: Creating entity index
DEBUG: Index 'entity_id_index' created
